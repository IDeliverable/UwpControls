<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ss="using:IDeliverable.Controls.Uwp.ScrollSelector">
	<ItemsPanelTemplate x:Key="ScrollSelectorItemsPanelTemplate">
		<ss:ScrollStackPanel x:Name="ItemsPanel" Padding="0,9999,0,9999" />
	</ItemsPanelTemplate>
	<SolidColorBrush x:Key="ScrollSelectorHeaderBackgroundBrush" Color="{ThemeResource SystemChromeMediumColor}"/>
	<Style x:Key="ScrollSelectorItemContainerStyle" TargetType="ListViewItem">
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="UseSystemFocusVisuals" Value="False" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<!-- This is to remove highlight visual for the selected item (our selection rectangle does that instead). SelectedBackground, SelectedPointerOverBackground, and SelectedPressedBackground are overridden to their non-selected equivalents. -->
					<ListViewItemPresenter ContentTransitions="{TemplateBinding ContentTransitions}" SelectionCheckMarkVisualEnabled="True" CheckBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" CheckBoxBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" DragBackground="{ThemeResource ListViewItemDragBackgroundThemeBrush}" DragForeground="{ThemeResource ListViewItemDragForegroundThemeBrush}" FocusBorderBrush="{ThemeResource SystemControlForegroundAltHighBrush}" FocusSecondaryBorderBrush="{ThemeResource SystemControlForegroundBaseHighBrush}" PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackgroundThemeBrush}" PointerOverBackground="{ThemeResource SystemControlHighlightListLowBrush}" PointerOverForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}" SelectedBackground="Transparent" SelectedForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}" SelectedPointerOverBackground="{ThemeResource SystemControlHighlightListLowBrush}" PressedBackground="{ThemeResource SystemControlHighlightListMediumBrush}" SelectedPressedBackground="{ThemeResource SystemControlHighlightListMediumBrush}" DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}" DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}" ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" ContentMargin="{TemplateBinding Padding}" CheckMode="Inline" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--
	These styles are selected dynamically by ScrollSelectorItemContainerStyleSelector.
	There should be a cleaner way to accomplish this, directly in the XAML, but I have not found one.
	ListViewItems are styled by assigning a style resource to the ItemContainerStyle property of a ListView
	derived class, and it's not possible to use TemplateBinding markup directive in styles (only in control
	templates).
	-->
	<Style x:Key="LeftScrollSelectorItemContainerStyle" BasedOn="{StaticResource ScrollSelectorItemContainerStyle}" TargetType="ListViewItem">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
	</Style>
	<Style x:Key="CenterScrollSelectorItemContainerStyle" BasedOn="{StaticResource ScrollSelectorItemContainerStyle}" TargetType="ListViewItem">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
	</Style>
	<Style x:Key="RightScrollSelectorItemContainerStyle" BasedOn="{StaticResource ScrollSelectorItemContainerStyle}" TargetType="ListViewItem">
		<Setter Property="HorizontalContentAlignment" Value="Right" />
	</Style>
	<Style TargetType="ss:ScrollSelector">
		<Setter Property="Foreground" Value="{ThemeResource SystemControlForegroundBaseHighBrush}" />
		<Setter Property="Background" Value="{ThemeResource SystemControlBackgroundChromeMediumLowBrush}" />
		<Setter Property="BorderBrush" Value="{ThemeResource SystemControlForegroundBaseHighBrush}" />
		<Setter Property="BorderThickness" Value="{ThemeResource ListBoxBorderThemeThickness}" />
		<Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
		<Setter Property="TabNavigation" Value="Once" />
		<Setter Property="IsTabStop" Value="True" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ss:ScrollSelector">
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="PointerUiStates">
								<VisualState x:Name="PointerUiHidden">
									<Storyboard>
										<DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="UpButton" Storyboard.TargetProperty="Opacity" To="0" />
										<ObjectAnimationUsingKeyFrames BeginTime="0:0:0.1" Storyboard.TargetName="UpButton" Storyboard.TargetProperty="Visibility">
											<DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed" />
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="DownButton" Storyboard.TargetProperty="Opacity" To="0" />
										<ObjectAnimationUsingKeyFrames BeginTime="0:0:0.1" Storyboard.TargetName="DownButton" Storyboard.TargetProperty="Visibility">
											<DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="PointerUiVisible">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="UpButton" Storyboard.TargetProperty="Visibility">
											<DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="UpButton" Storyboard.TargetProperty="Opacity" To="1" />
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="DownButton" Storyboard.TargetProperty="Visibility">
											<DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="DownButton" Storyboard.TargetProperty="Opacity" To="1" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<ScrollViewer x:Name="ItemsScrollViewer" Grid.RowSpan="2" VerticalSnapPointsAlignment="Center" VerticalSnapPointsType="Mandatory" HorizontalScrollMode="Disabled" VerticalScrollMode="Enabled" VerticalScrollBarVisibility="Hidden">
								<ItemsPresenter x:Name="Presenter" />
							</ScrollViewer>
							<ContentPresenter x:Name="HeaderContentPresenter" x:DeferLoadStrategy="Lazy" Visibility="Collapsed" Background="{ThemeResource ScrollSelectorHeaderBackgroundBrush}" Foreground="{ThemeResource TextControlHeaderForeground}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" Padding="2" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" FontWeight="Normal" />
							<Button x:Name="UpButton" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Top" Padding="8,2" IsTabStop="False">
								<Button.Resources>
									<ResourceDictionary>
										<ResourceDictionary.ThemeDictionaries>
											<!-- Would be nice if these resources could be reused across both buttons instead or duplicated. -->
											<ResourceDictionary x:Key="Light">
												<SolidColorBrush x:Key="ButtonBackground" Color="{ThemeResource SystemChromeMediumColor}" />
												<SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="{ThemeResource SystemChromeHighColor}" />
												<SolidColorBrush x:Key="ButtonBackgroundPressed" Color="{ThemeResource SystemChromeDisabledLowColor}" />
												<SolidColorBrush x:Key="ButtonBorderBrush" Color="Transparent" />
												<SolidColorBrush x:Key="ButtonBorderBrushPointerOver" Color="Transparent" />
												<SolidColorBrush x:Key="ButtonBorderBrushPressed" Color="Transparent" />
											</ResourceDictionary>
										</ResourceDictionary.ThemeDictionaries>
									</ResourceDictionary>
								</Button.Resources>
								<FontIcon Glyph="&#xF106;" FontFamily="ms-appx:///IDeliverable.Controls.Uwp.ScrollSelector/Assets/FontAwesome.ttf#FontAwesome" Foreground="{TemplateBinding Foreground}" />
							</Button>
							<Button x:Name="DownButton" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Padding="8,2" IsTabStop="False">
								<Button.Resources>
									<ResourceDictionary>
										<ResourceDictionary.ThemeDictionaries>
											<!-- Would be nice if these resources could be reused across both buttons instead or duplicated. -->
											<ResourceDictionary x:Key="Light">
												<SolidColorBrush x:Key="ButtonBackground" Color="{ThemeResource SystemChromeMediumColor}" />
												<SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="{ThemeResource SystemChromeHighColor}" />
												<SolidColorBrush x:Key="ButtonBackgroundPressed" Color="{ThemeResource SystemChromeDisabledLowColor}" />
												<SolidColorBrush x:Key="ButtonBorderBrush" Color="Transparent" />
												<SolidColorBrush x:Key="ButtonBorderBrushPointerOver" Color="Transparent" />
												<SolidColorBrush x:Key="ButtonBorderBrushPressed" Color="Transparent" />
											</ResourceDictionary>
										</ResourceDictionary.ThemeDictionaries>
									</ResourceDictionary>
								</Button.Resources>
								<FontIcon Glyph="&#xF107;" FontFamily="ms-appx:///IDeliverable.Controls.Uwp.ScrollSelector/Assets/FontAwesome.ttf#FontAwesome" Foreground="{TemplateBinding Foreground}" />
							</Button>
							<Rectangle x:Name="SelectionHighlight" Grid.RowSpan="2" Fill="{ThemeResource SystemControlHighlightListAccentLowBrush}" Height="30" VerticalAlignment="Center" IsHitTestVisible="False" />
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemsPanel" Value="{StaticResource ScrollSelectorItemsPanelTemplate}" />
	</Style>
</ResourceDictionary>
